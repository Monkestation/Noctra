name: BYOND Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  merge_group:
    branches:
    - master

env:
  BYOND_MAJOR: 515
  BYOND_MINOR: 1647
  SPACEMAN_DMM_VERSION: suite-1.9

concurrency:
  group: test_windows-${{ github.head_ref || github.run_id  }}
  cancel-in-progress: true

jobs:
  run-linters:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Run Linters
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: ~/SpacemanDMM
          key: ${{ runner.os }}-spacemandmm-${{ hashFiles('dependencies.sh') }}
          restore-keys: |
            ${{ runner.os }}-spacemandmm-
      - name: Restore Rust cache
        uses: actions/cache@v4
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-rust-${{ hashFiles('tools/ci/ci_dependencies.sh')}}
          restore-keys: |
            ${{ runner.os }}-rust-
      - name: Install Tools
        run: |
          pip3 install setuptools
          bash tools/ci/install_spaceman_dmm.sh dreamchecker
          bash tools/ci/install_ripgrep.sh
          tools/bootstrap/python -c ''
      - name: Give Linters A Go
        id: linter-setup
        run: ':'
      - name: Run Grep Checks
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: bash tools/ci/check_grep.sh
      - name: Ticked File Enforcement
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: |
          set +e
          tools/bootstrap/python tools/ticked_file_enforcement/ticked_file_enforcement.py < tools/ticked_file_enforcement/schemas/vanderlin_dme.json
          tools/bootstrap/python tools/ticked_file_enforcement/ticked_file_enforcement.py < tools/ticked_file_enforcement/schemas/unit_tests.json
      - name: Check Define Sanity
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: tools/bootstrap/python -m define_sanity.check
      - name: Run DreamChecker
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: ~/dreamchecker 2>&1 | bash tools/ci/annotate_dm.sh
      - name: Run Map Checks
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: |
          tools/bootstrap/python -m mapmerge2.dmm_test
          tools/bootstrap/python -m tools.maplint.source
      - name: Run DMI Tests
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: tools/bootstrap/python -m dmi.test
      - name: Check File Directories
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: bash tools/ci/check_filedirs.sh vanderlin.dme
      - name: Check Changelogs
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: bash tools/ci/check_changelogs.sh
      - name: Check Miscellaneous Files
        if: steps.linter-setup.conclusion == 'success' && !cancelled()
        run: bash tools/ci/check_misc.sh

  OpenDream:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Python setup
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Setup Cache
        uses: actions/cache@v4
        with:
          path: $HOME/spaceman_dmm/$SPACEMAN_DMM_VERSION
          key: ${{ runner.os }}-spacemandmm-${{ env.SPACEMAN_DMM_VERSION }}
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4.2.0
        with:
          dotnet-version: 9.x
      - name: Install OpenDream
        uses: robinraju/release-downloader@v1.9
        with:
          repository: "OpenDreamProject/OpenDream"
          tag: "latest"
          fileName: "DMCompiler_linux-x64.tar.gz"
          extract: true
      - name: Run OpenDream
        run: ./DMCompiler_linux-x64/DMCompiler vanderlin.dme --suppress-unimplemented --skip-anything-typecheck --version=${BYOND_MAJOR}.${BYOND_MINOR} | python tools/od_annotator/__main__.py "$@"

  compile_all_maps:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Compile Maps
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup cache
        uses: actions/cache@v4
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond
      - name: Compile All Maps
        run: |
          bash tools/ci/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          python3 tools/ci/template_dm_generator.py
          DreamMaker -DCIBUILDING -DCITESTING -DALL_MAPS vanderlin.dme

  find_all_maps:
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    name: Find Maps to Test
    runs-on: ubuntu-22.04
    outputs:
      maps: ${{ steps.map_finder.outputs.maps }}
    steps:
      - uses: actions/checkout@v4
      - name: Find Maps
        id: map_finder
        run: |
          echo "$(ls -mw0 _maps/*.json)" > maps_output.txt
          sed -i -e s+_maps/+\"+g -e s+.json+\"+g maps_output.txt
          echo "Maps: $(cat maps_output.txt)"
          echo "maps={\"paths\":[$(cat maps_output.txt)]}" >> $GITHUB_OUTPUT

  run_all_tests:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Integration Tests
    runs-on: ubuntu-22.04
    needs: [find_all_maps]
    strategy:
      fail-fast: false
      matrix:
        map: ${{ fromJSON(needs.find_all_maps.outputs.maps).paths }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Restore BYOND cache
        uses: actions/cache@v4
        with:
          path: ~/BYOND
          key: ${{ runner.os }}-byond
      - name: Setup database
        run: |
          sudo systemctl start mysql
          mysql -u root -proot -e 'CREATE DATABASE tg_ci;'
          mysql -u root -proot tg_ci < SQL/tgstation_schema.sql
          mysql -u root -proot -e 'CREATE DATABASE tg_ci_prefixed;'
          mysql -u root -proot tg_ci_prefixed < SQL/tgstation_schema_prefixed.sql
      - name: Install rust-g
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update || true
          sudo apt install zlib1g-dev:i386
          bash tools/ci/install_rust_g.sh
      - name: Compile and run tests
        run: |
          bash tools/ci/install_byond.sh
          source $HOME/BYOND/byond/bin/byondsetup
          DreamMaker -DCIBUILDING vanderlin.dme
          bash tools/ci/run_server.sh ${{ matrix.map }}

  test_windows:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Windows Build
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Restore BYOND cache
        uses: actions/cache@v4
        with:
          path: C:\\byond
          key: ${{ runner.os }}-byond
      - name: Compile
        run: pwsh tools/ci/build.ps1
        env:
          DM_EXE: "C:\\byond\\bin\\dm.exe"

